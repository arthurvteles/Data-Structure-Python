class Node:
    def __init__(self, data=None):
        self.data = data
        self.left = None
        self.right = None


class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        new_node = Node(value)
        if self.root is None:
            self.root = new_node
        else:
            self._insert(value, self.root)

    def _insert(self, value, cur_node):
        if value < cur_node.data:
            if cur_node.left is None:
                cur_node.left = Node(value)

            else:
                return self._insert(value, cur_node.left)
        elif value > cur_node.data:
            if cur_node.right is None:
                cur_node.right = Node(value)

            else:
                return self._insert(value, cur_node.right)
        else:
            print(f"{value} is already in the tree")

    def find(self, value):
        if self.root:
            is_found = self._find(value, self.root)
            return is_found
        else:
            return None

    def _find(self, value, cur_node):
        if value > cur_node.data and cur_node.right:
            return self._find(value, cur_node.right)
        elif value < cur_node.data and cur_node.left:
            return self._find(value, cur_node.left)
        elif value == cur_node.data:
            return True
        else:
            return False


tree = BinaryTree()
tree.insert(5)
tree.insert(15)
tree.insert(3)
print(tree.find(15))
print(tree.find(25))
